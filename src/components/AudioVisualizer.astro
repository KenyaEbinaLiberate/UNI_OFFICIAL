<canvas id="audioVisualizer"></canvas>

<script>
  // Web Audio APIのセットアップ
  const audioContext = new (window.AudioContext || window.webkitAudioContext)();
  const audioElement = new Audio('/sound.mp3');
  audioElement.loop = true;

  const source = audioContext.createMediaElementSource(audioElement);
  const analyser = audioContext.createAnalyser();
  analyser.fftSize = 128; // より少ないバーの数
  const bufferLength = analyser.frequencyBinCount;
  const dataArray = new Uint8Array(bufferLength);

  source.connect(analyser);
  analyser.connect(audioContext.destination);

  // キャンバスのセットアップ
  const canvas = document.getElementById('audioVisualizer') as HTMLCanvasElement;
  const ctx = canvas.getContext('2d')!;

  // キャンバスのサイズ設定
  const setCanvasSize = () => {
    canvas.width = 120; // CSSの幅に合わせる
    canvas.height = window.innerHeight * 1.5; // 150dvhに合わせる
    canvas.style.height = '150dvh';
  };

  setCanvasSize();
  window.addEventListener('resize', setCanvasSize);

  let isPlaying = false;
  let animationId: number;

  // ビジュアライザーの描画
  const drawVisualizer = () => {
    analyser.getByteFrequencyData(dataArray);

    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const maxBarWidth = canvas.width;
    const barCount = bufferLength;
    const barHeightBase = canvas.height / barCount;

    for (let i = 0; i < barCount; i++) {
      const amplitude = dataArray[i] / 255;
      const barWidth = Math.max(2, amplitude * maxBarWidth);

      if (amplitude > 0) {
        const y = barHeightBase * i;
        const centerY = y + (barHeightBase / 2);

        // 三角形のパスを描画（右向きに変更）
        ctx.beginPath();
        ctx.moveTo(0, centerY - barHeightBase / 2); // 左上の点
        ctx.lineTo(0, centerY + barHeightBase / 2); // 左下の点
        ctx.lineTo(barWidth, centerY); // 右端（頂点）
        ctx.closePath();

        // グラデーションの設定（方向も反転）
        const gradient = ctx.createLinearGradient(0, centerY, barWidth, centerY);
        gradient.addColorStop(0, 'rgba(0, 0, 255, 1)'); // 薄い青（底辺）
        gradient.addColorStop(1, 'rgba(0, 0, 255, 1)'); // 濃い青（先端）

        // 影の設定（右向きに変更）
        ctx.shadowColor = 'rgba(0, 0, 255, 0)';
        ctx.shadowBlur = 5;
        ctx.shadowOffsetX = -2; // 負の値に変更して左側に影を付ける

        ctx.fillStyle = gradient;
        ctx.fill();

        // 影をリセット
        ctx.shadowColor = 'transparent';
        ctx.shadowBlur = 0;
        ctx.shadowOffsetX = 0;
      }
    }

    animationId = requestAnimationFrame(drawVisualizer);
  };

  // グローバルイベントリスナーを設定
  window.addEventListener('audioplayerstatechange', ((event: CustomEvent) => {
    isPlaying = event.detail.isPlaying;

    if (isPlaying) {
      if (audioContext.state === 'suspended') {
        audioContext.resume();
      }
      audioElement.play();
      drawVisualizer();
    } else {
      audioElement.pause();
      cancelAnimationFrame(animationId);
      // キャンバスをクリア
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }
  }) as EventListener);
</script>

<style>
  #audioVisualizer {
    position: fixed;
    top: 0;
    left: 0;
    width:300px;
    height: 125dvh;
    z-index: 1;
    pointer-events: none;
  }
</style>
