<canvas id="audioVisualizer"></canvas>

<script>
  const canvas = document.getElementById('audioVisualizer') as HTMLCanvasElement;
  const ctx = canvas.getContext('2d')!;

  // Web Audio API の設定
  let audioContext: AudioContext;
  let analyser: AnalyserNode;
  let dataArray: Uint8Array;

  // キャンバスのサイズ設定
  const setCanvasSize = () => {
    canvas.width = 120;
    canvas.height = window.innerHeight * 1.5;
    canvas.style.height = '175dvh';
  };

  setCanvasSize();
  window.addEventListener('resize', setCanvasSize);

  let isPlaying = false;
  let animationId: number;

  // ビジュアライザーの描画
  const drawVisualizer = () => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const maxBarWidth = canvas.width;
    const barCount = analyser.frequencyBinCount;
    const barHeightBase = canvas.height / barCount;

    analyser.getByteFrequencyData(dataArray);

    for (let i = 0; i < barCount; i++) {
      const amplitude = dataArray[i] / 255.0; // 0-1の範囲に正規化
      const barWidth = Math.max(2, amplitude * maxBarWidth);

      if (amplitude > 0) {
        const y = barHeightBase * i;
        const centerY = y + barHeightBase / 2;

        ctx.beginPath();
        ctx.moveTo(0, centerY - barHeightBase / 2.5);
        ctx.lineTo(0, centerY + barHeightBase / 2.5);
        ctx.lineTo(barWidth, centerY);
        ctx.closePath();

        const gradient = ctx.createLinearGradient(0, centerY, barWidth, centerY);
        gradient.addColorStop(0, 'rgba(0, 0, 255, 1)');
        gradient.addColorStop(1, 'rgba(0, 0, 255, 1)');

        ctx.shadowColor = 'rgba(0, 0, 255, 0)';
        ctx.shadowBlur = 5;
        ctx.shadowOffsetX = -2;

        ctx.fillStyle = gradient;
        ctx.fill();

        ctx.shadowColor = 'transparent';
        ctx.shadowBlur = 0;
        ctx.shadowOffsetX = 0;
      }
    }

    if (isPlaying) {
      animationId = requestAnimationFrame(drawVisualizer);
    }
  };

  // グローバルイベントリスナーを設定
  window.addEventListener('audioplayerstatechange', ((event: CustomEvent) => {
    console.log('Audio player state changed:', event.detail);
    isPlaying = event.detail.isPlaying;

    if (event.detail.audioContext && event.detail.analyser) {
      audioContext = event.detail.audioContext;
      analyser = event.detail.analyser;
      dataArray = new Uint8Array(analyser.frequencyBinCount);
    }

    if (isPlaying) {
      console.log('Starting visualization');
      if (audioContext?.state === 'suspended') {
        console.log('Resuming audio context');
        audioContext.resume();
      }
      drawVisualizer();
    } else {
      console.log('Stopping visualization');
      cancelAnimationFrame(animationId);
      ctx.clearRect(0, 0, canvas.width, canvas.height);
    }
  }) as EventListener);

  // カスタムイベントが発火されているか確認するためのデバッグコード
  console.log('AudioVisualizer component initialized');
</script>

<style>
  #audioVisualizer {
    position: fixed;
    top: 0;
    left: 0;
    width: 300px;
    height: 125dvh;
    z-index: 10;
    pointer-events: none;
  }
</style>
