---
---
<script>
document.addEventListener('DOMContentLoaded', () => {
  const wrapCharactersInSpan = () => {
    const elements = document.querySelectorAll('.floating__navi .menu__wrap .button p, .floating__navi .menu__wrap .text__link p');
    requestAnimationFrame(() => {
      elements.forEach(element => {
        if (!element.querySelector('span')) {
          const text = element.textContent?.trim() || '';
          const fragment = document.createDocumentFragment();
          [...text].forEach((char, index) => {
            const span = document.createElement('span');
            span.textContent = char === ' ' ? '\u00A0' : char;
            span.style.cssText = `
              display: inline-block;
              transition: all 0.3s ease-in-out;
              width: ${char === ' ' ? '0.5em' : 'auto'};
            `;
            fragment.appendChild(span);
          });
          element.textContent = '';
          element.appendChild(fragment);
        }
      });
    });
  };

  const animateSpans = (element: HTMLElement) => {
    const spans = element.querySelectorAll('span');
    spans.forEach((span, index) => {
      span.style.opacity = '0';
      span.style.transform = 'translateY(20px)';

      setTimeout(() => {
        span.style.opacity = '1';
        span.style.transform = 'translateY(0)';
      }, 40 * index);
    });
  };

  const resetSpans = (element: HTMLElement) => {
    const spans = element.querySelectorAll('span');
    spans.forEach(span => {
      span.style.opacity = '';
      span.style.transform = '';
    });
  };

  // メニューが開かれたときにテキストを処理
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      const target = mutation.target as HTMLElement;
      if (target.classList.contains('is__open')) {
        wrapCharactersInSpan();
      }
    });
  });

  // ホバーイベントの設定
  document.querySelectorAll('.floating__navi .menu__wrap .button, .floating__navi .menu__wrap .text__link').forEach(element => {
    element.addEventListener('mouseenter', () => {
      const textElement = element.querySelector('p');
      if (textElement) {
        animateSpans(textElement);
      }
    });

    element.addEventListener('mouseleave', () => {
      const textElement = element.querySelector('p');
      if (textElement) {
        resetSpans(textElement);
      }
    });
  });

  const floatingNavi = document.querySelector('.floating__navi');
  if (floatingNavi) {
    observer.observe(floatingNavi, {
      attributes: true,
      attributeFilter: ['class']
    });

    // 初期化時にも実行（既にis__openクラスが付いている場合のため）
    if ((floatingNavi as HTMLElement).classList.contains('is__open')) {
      wrapCharactersInSpan();
    }
  }
});
</script>

<style>
.floating__navi .menu__wrap .button p,
.floating__navi .menu__wrap .text__link p {
  contain: content;
  position: relative;
}

.floating__navi .menu__wrap .button p span,
.floating__navi .menu__wrap .text__link p span {
  will-change: transform, opacity;
  backface-visibility: hidden;
  transform: translateZ(0);
  contain: paint layout;
}
</style>
