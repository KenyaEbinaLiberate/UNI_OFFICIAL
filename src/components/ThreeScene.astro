---
---

<canvas id="canvas"></canvas>

<script>
  import * as THREE from 'three';

  const canvas = document.getElementById("canvas");
  const renderer = new THREE.WebGLRenderer({
    canvas,
    antialias: true,
    preserveDrawingBuffer: true,
  });
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0xe3e3db);

  // カメラの視野角を広げて、より画面いっぱいに表示
  const camera = new THREE.PerspectiveCamera(
    75, // より広い視野角
    window.innerWidth / window.innerHeight,
    0.1,
    100
  );
  camera.position.z = 1.96; // カメラを近づける

  // 初期状態で非表示にする
  renderer.domElement.style.opacity = '0';
  renderer.domElement.style.transform = 'translateX(100px)';
  renderer.domElement.style.transition = 'opacity 0.8s ease-out, transform 0.8s ease-out';

  // フェードインアニメーション
  setTimeout(() => {
    renderer.domElement.style.opacity = '1';
    renderer.domElement.style.transform = 'translateX(0)';
  }, 500);

  const settings = {
    wheelSensitivity: 0.01,
    touchSensitivity: 0.01,
    momentumMultiplier: 2,
    smoothing: 0.1,
    slideLerp: 0.075,
    distortionDecay: 0.95,
    maxDistortion: 2.5,
    distortionSensitivity: 0.15,
    distortionSmoothing: 0.075,
  };

  // スライドのサイズを画面サイズに基づいて計算
  const calculateSlideSize = () => {
    const aspectRatio = window.innerWidth / window.innerHeight;
    const slideHeight = 3.0; // 基準となる高さ
    const slideWidth = slideHeight * aspectRatio;
    return { width: slideWidth, height: slideHeight };
  };

  let slideSize = calculateSlideSize();
  const gap = 0.1;
  const slideCount = 10;
  const imagesCount = 5;
  const totalWidth = slideCount * (slideSize.width + gap);
  const slideUnit = slideSize.width + gap;

  const slides = [];
  let currentPosition = 0;
  let targetPosition = 0;
  let isScrolling = false;
  let autoScrollSpeed = 0;
  let lastTime = 0;
  let touchStartX = 0;
  let touchLastX = 0;
  let prevPosition = 0;

  let currentDistortionFactor = 0;
  let targetDistortionFactor = 0;
  let peakVelocity = 0;
  let velocityHistory = [0, 0, 0, 0, 0];

  const correctImageColor = (texture) => {
    texture.colorSpace = THREE.SRGBColorSpace;
    return texture;
  };

  const createSlide = (index) => {
    const geometry = new THREE.PlaneGeometry(slideSize.width, slideSize.height, 32, 16);

    const colors = ["#FF5733", "#33FF57", "#3357FF", "#F3FF33", "#FF33F3"];
    const material = new THREE.MeshBasicMaterial({
      color: new THREE.Color(colors[index % colors.length]),
      side: THREE.DoubleSide,
    });

    const mesh = new THREE.Mesh(geometry, material);
    mesh.position.x = index * (slideSize.width + gap);
    mesh.userData = {
      originalVertices: [...geometry.attributes.position.array],
      index,
    };

    const imageIndex = (index % imagesCount) + 1;
    const imagePath = `/img${imageIndex}.jpg`;

    new THREE.TextureLoader().load(
      imagePath,
      (texture) => {
        correctImageColor(texture);
        material.map = texture;
        material.color.set(0xffffff);
        material.needsUpdate = true;

        // テクスチャのサイズ調整をcover相当に
        const imgAspect = texture.image.width / texture.image.height;
        const slideAspect = slideSize.width / slideSize.height;

        if (imgAspect > slideAspect) {
          // 画像が横長の場合、高さに合わせる
          const scale = slideAspect / imgAspect;
          texture.repeat.set(scale, 1);
          texture.offset.x = (1 - scale) / 2;
        } else {
          // 画像が縦長の場合、幅に合わせる
          const scale = imgAspect / slideAspect;
          texture.repeat.set(1, scale);
          texture.offset.y = (1 - scale) / 2;
        }
      },
      undefined,
      (err) => console.warn(`Couldn't load image ${imagePath}`, err)
    );

    scene.add(mesh);
    slides.push(mesh);
  };

  // スライドの作成
  for (let i = 0; i < slideCount; i++) {
    createSlide(i);
  }

  slides.forEach((slide) => {
    slide.position.x -= totalWidth / 2;
    slide.userData.targetX = slide.position.x;
    slide.userData.currentX = slide.position.x;
  });

  const updateCurve = (mesh, worldPositionX, distortionFactor) => {
    const distortionCenter = new THREE.Vector2(0, 0);
    const distortionRadius = 2.0;
    const maxCurvature = settings.maxDistortion * distortionFactor;

    const positionAttribute = mesh.geometry.attributes.position;
    const originalVertices = mesh.userData.originalVertices;

    for (let i = 0; i < positionAttribute.count; i++) {
      const x = originalVertices[i * 3];
      const y = originalVertices[i * 3 + 1];

      const vertexWorldPosX = worldPositionX + x;
      const distFromCenter = Math.sqrt(
        Math.pow(vertexWorldPosX - distortionCenter.x, 2) +
          Math.pow(y - distortionCenter.y, 2)
      );

      const distortionStrength = Math.max(
        0,
        1 - distFromCenter / distortionRadius
      );
      const curveZ =
        Math.pow(Math.sin((distortionStrength * Math.PI) / 2), 1.5) *
        maxCurvature;

      positionAttribute.setZ(i, curveZ);
    }

    positionAttribute.needsUpdate = true;
    mesh.geometry.computeVertexNormals();
  };

  // イベントリスナー
  window.addEventListener("keydown", (e) => {
    if (e.key === "ArrowLeft") {
      targetPosition += slideUnit;
      targetDistortionFactor = Math.min(1.0, targetDistortionFactor + 0.3);
    } else if (e.key === "ArrowRight") {
      targetPosition -= slideUnit;
      targetDistortionFactor = Math.min(1.0, targetDistortionFactor + 0.3);
    }
  });

  window.addEventListener(
    "wheel",
    (e) => {
      e.preventDefault();
      const wheelStrength = Math.abs(e.deltaY) * 0.001;
      targetDistortionFactor = Math.min(
        1.0,
        targetDistortionFactor + wheelStrength
      );

      targetPosition -= e.deltaY * settings.wheelSensitivity;
      isScrolling = true;
      autoScrollSpeed =
        Math.min(Math.abs(e.deltaY) * 0.0005, 0.05) * Math.sign(e.deltaY);

      clearTimeout(window.scrollTimeout);
      window.scrollTimeout = setTimeout(() => {
        isScrolling = false;
      }, 150);
    },
    { passive: false }
  );

  window.addEventListener(
    "touchstart",
    (e) => {
      touchStartX = e.touches[0].clientX;
      touchLastX = touchStartX;
      isScrolling = false;
    },
    { passive: false }
  );

  window.addEventListener(
    "touchmove",
    (e) => {
      e.preventDefault();
      const touchX = e.touches[0].clientX;
      const deltaX = touchX - touchLastX;
      touchLastX = touchX;

      const touchStrength = Math.abs(deltaX) * 0.02;
      targetDistortionFactor = Math.min(
        1.0,
        targetDistortionFactor + touchStrength
      );

      targetPosition -= deltaX * settings.touchSensitivity;
      isScrolling = true;
    },
    { passive: false }
  );

  window.addEventListener("touchend", () => {
    const velocity = (touchLastX - touchStartX) * 0.005;
    if (Math.abs(velocity) > 0.5) {
      autoScrollSpeed = -velocity * settings.momentumMultiplier * 0.05;
      targetDistortionFactor = Math.min(
        1.0,
        Math.abs(velocity) * 3 * settings.distortionSensitivity
      );
      isScrolling = true;
      setTimeout(() => {
        isScrolling = false;
      }, 800);
    }
  });

  // リサイズ時の処理を改善
  window.addEventListener("resize", () => {
    // ビューポートのサイズを更新
    renderer.setSize(window.innerWidth, window.innerHeight);
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    // スライドのサイズを更新
    slideSize = calculateSlideSize();
    slides.forEach((slide, index) => {
      // ジオメトリを更新
      const newGeometry = new THREE.PlaneGeometry(slideSize.width, slideSize.height, 32, 16);
      slide.geometry.dispose();
      slide.geometry = newGeometry;
      slide.userData.originalVertices = [...newGeometry.attributes.position.array];

      // 位置を更新
      const newTotalWidth = slideCount * (slideSize.width + gap);
      slide.position.x = (index * (slideSize.width + gap)) - (newTotalWidth / 2) + currentPosition;
      slide.userData.targetX = slide.position.x - currentPosition;
      slide.userData.currentX = slide.position.x;

      // テクスチャの調整（もし存在すれば）
      if (slide.material.map) {
        const texture = slide.material.map;
        const imgAspect = texture.image.width / texture.image.height;
        const slideAspect = slideSize.width / slideSize.height;

        if (imgAspect > slideAspect) {
          const scale = slideAspect / imgAspect;
          texture.repeat.set(scale, 1);
          texture.offset.x = (1 - scale) / 2;
        } else {
          const scale = imgAspect / slideAspect;
          texture.repeat.set(1, scale);
          texture.offset.y = (1 - scale) / 2;
        }
      }
    });
  });

  // イージング関数の追加
  const easeOutExpo = (x) => {
    return x === 1 ? 1 : 1 - Math.pow(2, -10 * x);
  };

  // 初期アニメーションの設定
  const initialAnimation = {
    startDelay: 1200,
    duration: 3000,
    targetScroll: -25,
    started: false,
    startTime: 0
  };

  // アニメーション開始を遅延実行（フェードイン後に開始）
  setTimeout(() => {
    initialAnimation.started = true;
    initialAnimation.startTime = performance.now();
    targetDistortionFactor = 0.5;
  }, initialAnimation.startDelay);

  const animate = (time) => {
    requestAnimationFrame(animate);

    // 初期アニメーションの処理
    if (initialAnimation.started) {
      const elapsed = time - initialAnimation.startTime;
      if (elapsed <= initialAnimation.duration) {
        const progress = elapsed / initialAnimation.duration;
        const eased = easeOutExpo(progress);
        targetPosition = initialAnimation.targetScroll * eased;
      }
    }

    const deltaTime = lastTime ? (time - lastTime) / 1000 : 0.016;
    lastTime = time;

    const prevPos = currentPosition;
    currentPosition = THREE.MathUtils.lerp(
      currentPosition,
      targetPosition,
      settings.smoothing
    );

    const velocity = (currentPosition - prevPos) / deltaTime;
    velocityHistory.shift();
    velocityHistory.push(Math.abs(velocity));

    const avgVelocity =
      velocityHistory.reduce((sum, val) => sum + val, 0) /
      velocityHistory.length;

    if (avgVelocity > peakVelocity) {
      peakVelocity = avgVelocity;
    } else {
      peakVelocity *= 0.95;
    }

    targetDistortionFactor *= settings.distortionDecay;
    currentDistortionFactor = THREE.MathUtils.lerp(
      currentDistortionFactor,
      targetDistortionFactor,
      settings.distortionSmoothing
    );

    slides.forEach((slide) => {
      const targetX = slide.userData.targetX + currentPosition;
      slide.userData.currentX = THREE.MathUtils.lerp(
        slide.userData.currentX,
        targetX,
        settings.slideLerp
      );
      slide.position.x = slide.userData.currentX;

      updateCurve(slide, slide.position.x, currentDistortionFactor);

      if (slide.position.x < -totalWidth / 2) {
        slide.position.x += totalWidth;
        slide.userData.targetX += totalWidth;
        slide.userData.currentX += totalWidth;
      } else if (slide.position.x > totalWidth / 2) {
        slide.position.x -= totalWidth;
        slide.userData.targetX -= totalWidth;
        slide.userData.currentX -= totalWidth;
      }
    });

    renderer.render(scene, camera);
  };

  animate(performance.now());

  const audioContext = new (window.AudioContext || window.webkitAudioContext)();
  const audioElement = new Audio('/sound.mp3');
  const source = audioContext.createMediaElementSource(audioElement);
  const analyser = audioContext.createAnalyser();

  analyser.fftSize = 128; // 周波数帯域の分割数
  const bufferLength = analyser.frequencyBinCount; // 実際のデータ配列の長さ（fftSizeの半分）
  const dataArray = new Uint8Array(bufferLength); // 周波数データを格納する配列

  const drawVisualizer = () => {
    analyser.getByteFrequencyData(dataArray); // 現在の周波数データを取得

    for (let i = 0; i < barCount; i++) {
      const barHeight = (dataArray[i] * barHeightMultiplier) || 0;
      if (barHeight > 0) {
        const y = (canvas.height / barCount) * i;
        // グラデーションの作成
        const gradient = ctx.createLinearGradient(0, y, barWidth, y);
        gradient.addColorStop(0, `rgba(255, 255, 255, ${barHeight / 255 * 0.8})`);
        gradient.addColorStop(1, `rgba(255, 255, 255, 0)`);
      }
    }
  }
</script>

<style>
  canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100dvh;
    z-index: -1;
    opacity: 0;
    transform: translateX(100px);
    will-change: opacity, transform;
  }


</style>
