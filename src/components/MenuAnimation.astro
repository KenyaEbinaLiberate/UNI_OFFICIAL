<div class="menu__wrap">
  <a href="https://www.instagram.com/uni_tokyo_/" target="_blank" class="button">
    <p>Instagram</p>
    <figure><img src="/images/arrow.svg" alt="arrow" width="18" height="18"></figure>
  </a>
  <a href="https://book.squareup.com/appointments/nfpu5rx7wnb164/location/LX0WJNR6KK7EK/services/H5IF7JT55BX5Z5ZVQOWJITRA" target="_blank" class="button">
    <p>Book an Appointment</p>
    <figure><img src="/images/arrow.svg" alt="arrow" width="18" height="18"></figure>
  </a>
  <a href="https://liberate-group.com/" target="_blank" class="text__link">
    <p>By LIBERATE Inc.</p>
    <figure><img src="/images/arrow.svg" alt="arrow" width="18" height="18"></figure>
  </a>
  <div class="detail__wrap">
  <p class="label__text">Select Store<br>Asakusabashi, Tokyo</p>
	<p class="label__text">Appointment Only<br>14:00-20:00</p></p>
  <p id="time">00:00</p>
  </div>

</div>



<script>
  const floatingNavi = document.querySelector('.floating__navi');
  const naviArrow = document.querySelector('.navi__arrow') as HTMLElement;
  const textAnimation = document.querySelector('.message__area') as HTMLElement;
  const plusIcon = document.querySelector('.plus__icon') as HTMLElement;
  const plusIconInner = document.querySelector('.plus__icon > div') as HTMLElement;
  const menuWrap = document.querySelector('.menu__wrap') as HTMLElement;
  const menuOverlay = document.querySelector('.menu__overlay') as HTMLElement;
  let isMenuOpen = false;

  // スクロール位置を保存する変数
  let scrollPosition = 0;

  const disableScroll = () => {
    scrollPosition = window.scrollY;
    document.body.style.position = 'fixed';
    document.body.style.top = `-${scrollPosition}px`;
    document.body.style.width = '100%';
    document.documentElement.style.overflow = 'hidden';
    document.body.style.touchAction = 'none'; // モバイルでのスクロール防止
  };

  const enableScroll = () => {
    document.body.style.position = '';
    document.body.style.top = '';
    document.body.style.width = '';
    document.documentElement.style.overflow = '';
    window.scrollTo(0, scrollPosition);
  };

  // 時計の機能を追加
  const updateTime = () => {
    const timeElement = document.getElementById('time');
    if (!timeElement) return;

    window.requestAnimationFrame(() => {
      const now = new Date();
      const hours = String(now.getHours()).padStart(2, '0');
      const minutes = String(now.getMinutes()).padStart(2, '0');
      const seconds = String(now.getSeconds()).padStart(2, '0');
      timeElement.textContent = `${hours}:${minutes}:${seconds}`;
    });
  };

  // 1秒ごとに時間を更新
  setInterval(updateTime, 1000);
  // 初回表示
  updateTime();

  if (floatingNavi) {
    floatingNavi.addEventListener('click', () => {
      isMenuOpen = !isMenuOpen;

      // オーバーレイの表示/非表示とスクロール制御
      if (menuOverlay) {
        menuOverlay.style.opacity = isMenuOpen ? '1' : '0';
        menuOverlay.style.visibility = isMenuOpen ? 'visible' : 'hidden';

        if (isMenuOpen) {
          disableScroll();
        } else {
          enableScroll();
        }
      }

      // floating__naviにis__openクラスを追加/削除
      floatingNavi.classList.toggle('is__open');

      // 矢印の回転
      if (naviArrow) {
        naviArrow.style.display = isMenuOpen ? 'none' : 'block';
        naviArrow.style.transition = 'transform 0.3s ease';
      }

      // テキストアニメーションの表示/非表示
      if (textAnimation) {
        textAnimation.style.opacity = isMenuOpen ? '0' : '1';
        textAnimation.style.display = isMenuOpen ? 'none' : 'block';
        textAnimation.style.transition = 'opacity 0.3s ease';

      }

      // プラスアイコンのアニメーション
      if (plusIcon && plusIconInner) {
        plusIcon.style.transform = isMenuOpen ? 'rotate(180deg)' : 'rotate(0)';
        plusIcon.style.transition = 'transform 0.3s ease';
        plusIconInner.style.opacity = isMenuOpen ? '0' : '1';
        plusIconInner.style.transition = 'opacity 0.3s ease';
      }

      // メニューのフェードイン/アウト
      if (menuWrap) {
        menuWrap.style.opacity = isMenuOpen ? '1' : '0';
        menuWrap.style.visibility = isMenuOpen ? 'visible' : 'hidden';
        menuWrap.style.transition = 'opacity 0.3s ease, visibility 0.3s ease';
      }
    });
  }
</script>

<style>
  :global(.floating__navi) {
    /* contain: content を削除してレイアウトの制限を解除 */
  }

  :global(.menu__wrap) {
    z-index: 999;
    position: relative; /* absoluteからrelativeに戻す */
    will-change: opacity, visibility;
    /* contain: layout paint を削除 */
    transform: translateZ(0);
  }

  :global(.navi__arrow),
  :global(.plus__icon),
  :global(.plus__icon > div) {
    transition: all 0.3s ease;
    will-change: transform, opacity;
    transform: translateZ(0);
    backface-visibility: hidden;
  }

  :global(.floating__navi.is__open .plus__icon::before) {
    height: 0 !important;
  }

  :global(.menu__wrap img) {
    /* contain: strict を削除 */
    transform: translateZ(0);
  }
</style>
